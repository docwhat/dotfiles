#!/usr/bin/env bash
# shellcheck disable=2317

set -eEuo pipefail

# Colors
red="$(tput setaf 1 2>/dev/null || true)"
yellow="$(tput setaf 3 2>/dev/null || true)"
reset="$(tput sgr0 2>/dev/null || true)"
readonly red yellow reset

declare -i verbose=1

function error() {
  echo "${red}ERROR${reset}: $*"
  exit 10
}

function warn() {
  echo "${yellow}WARNING${reset}: $*"
}

function info() {
  if ((verbose)); then
    echo "$*"
  fi
}

function stub_path() {
  local -r bin="$1"
  echo -n "${HOME}/.dotfiles/tag-nodejs/bin/$(basename "${bin}")"
}

# shellcheck disable=SC2016
function prstub() {
  local -r bin="$1"
  shift
  local -ra packages=("$@")

  printf '#!/usr/bin/env bash\n'
  echo
  printf '##marker: NODEJS-CLI-TOOL##\n'
  echo
  # The @Q only works in bash 4.4+
  # It should be okay in bash <4.4 because package names don't have
  # have shell sensitive characters (e.g., spaces and quotes).
  printf 'packages=(%s)\n' "${packages[*]@Q}"
  printf 'bin=%q\n' "${bin}"
  echo
  printf 'args=(npx --yes)\n'
  printf 'for pkg in "${packages[@]}"; do\n'
  printf '  args+=("--package=${pkg}")\n'
  printf 'done\n'
  printf 'args+=(-- "${bin}" "$@")\n'
  echo
  printf 'exec "${args[@]}"\n'
  echo
  printf '#EOF\n'
}

function mkstub() {
  local -r bin="$1"

  local path
  path="$(stub_path "${bin}")"
  local -r path

  # shellcheck disable=SC2310
  if prstub "$@" >"${path}.tmp"; then
    chmod +x "${path}.tmp"
    mv -f "${path}.tmp" "${path}"
  else
    rm -f "${path}.tmp"
    error "Failed to create ${path}"
  fi
}

function update_stub() {
  local -r bin="$1"
  local path

  path="$(stub_path "${bin}")"
  local -r path

  if ! [[ -x ${path} ]]; then
    error "Cannot update ${bin}; it does not exist\!"
  fi

  if ! grep -qE '^##marker: NODEJS-CLI-TOOL##$' "${path}"; then
    warn "${path} is not a node-cli; skipping "
    return
  fi

  local -a update_packages=()
  while read -r line; do
    if [[ ${line} == packages=* ]]; then
      eval "update_${line}"
      break
    fi
  done <"${path}"

  if (("${#update_packages[@]}" == 0)); then
    warn "No packages found in ${path}; skipping"
    return
  fi

  mkstub "${bin}" "${update_packages[@]}"
}

function show_help() {
  echo "Usage: $0 <bin-name> [-p <package-name>...] [-u] [-f] [-q]"
  echo
  echo "  -p, --package <package-name>"
  echo "    Specify a package to install."
  echo "    You can specify multiple packages."
  echo "  -u, --update"
  echo "    Update the stubs for the specified bins."
  echo "  -f, --overwrite"
  echo "    Overwrite existing stubs."
  echo "    This is only valid when creating stubs."
  echo "  -q, --quiet"
  echo "    Only print warnings and errors."
  echo "  -h, --help"
  echo "    Show this help message."
  echo
  exit 0
}

function main() {

  local -a packages=() bins=()
  local -i is_updating=0
  local -i is_overwriting=0
  while (($#)); do
    case "$1" in
    --help | --h | -h)
      show_help
      ;;
    --package | --p | -p)
      shift
      packages+=("$2")
      ;;
    --package=* | --p=* | -p=*)
      packages+=("${1#*=}")
      ;;
    --update | --u | -u)
      is_updating=1
      ;;
    --overwrite | --f | -f)
      is_overwriting=1
      ;;
    --quiet | --q | -q)
      verbose=0
      ;;
    -*)
      error "I don't understand the flag $1"
      ;;
    *)
      bins+=("$1")
      ;;
    esac
    shift
  done

  local -r \
    packages \
    bins \
    is_updating \
    is_overwriting

  if ! ((${#bins})); then
    error 'You must specify at least one command!'
  fi

  if ((is_updating)); then
    if (("${#packages[@]}")); then
      error "You mustn't specify packages when updating."
    fi
    if ((is_overwriting)); then
      error "--overwrite makes no sense when updating."
    fi

    local cksum1 cksum2
    for bin in "${bins[@]}"; do
      path="$(stub_path "${bin}")"
      cksum1="$(cksum "${path}")"
      update_stub "${bin}"
      cksum2="$(cksum "${path}")"
      if [[ ${cksum1} == "${cksum2}" ]]; then
        info "${bin} is up to date"
      else
        info "Updated ${bin}"
      fi
    done

    exit 0
  fi

  local -a bins_to_create=()
  for bin in "${bins[@]}"; do
    path="$(stub_path "${bin}")"
    if [[ -x ${path} ]]; then
      if ! ((is_overwriting)); then
        warn "${path} already exists; skipping"
        continue
      fi
    fi

    bins_to_create+=("${bin}")
  done
  local -r bins_to_create

  if ! (("${#bins_to_create[@]}")); then
    error 'No bins to create!'
  fi

  echo "add-node-cli will do the following:"
  echo "  create:     ${bins_to_create[*]}"
  echo

  for bin in "${bins_to_create[@]}"; do
    if (("${#packages[@]}")); then
      mkstub "${bin}" "${packages[@]}"
    else
      mkstub "${bin}" "${bin}"
    fi
  done

  rcup -K
}

main "$@"
exit 0

# EOF
