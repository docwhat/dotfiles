#!/usr/bin/env ruby
# frozen_string_literal: true

require 'English'
require 'json'
require 'open-uri'
require 'open3'
require 'pathname'
require 'rbconfig'

# Kubernetes client needs to be within 1 minor version of the server.
class App
  NAME = 'kubectl-smart'
  DIRECTORY = Pathname.new("~/.cache/#{NAME}").expand_path.realdirpath.tap(&:mkpath).freeze
  PROGRAM_NAME = Pathname.new($PROGRAM_NAME).expand_path.realpath.freeze
  KREW_BIN_DIR = Pathname.new('~/.krew/bin').expand_path.freeze

  def die(msg)
    warn msg
    exit(2)
  end

  def path
    DIRECTORY + "kubectl-#{os}-#{arch}-#{major_minor}"
  end

  def exact_path
    DIRECTORY + "kubectl-#{os}-#{arch}-#{version}"
  end

  def os
    @os ||= begin
        host_os = RbConfig::CONFIG['host_os']
        case host_os
        when /mswin|msys|mingw|cygwin|bccwin|wince|emc/
          'windows'
        when /darwin|mac os/
          'darwin'
        when /linux/
          'linux'
        else
          die "I don't know what os #{host_os.inspect} is."
        end
      end
  end

  def arch
    @arch ||= begin
        host_cpu = RbConfig::CONFIG['host_cpu']
        case host_cpu
        when /x86_64/
          'amd64'
        else
          die "I don't know what arch #{host_cpu.inspect} is."
        end
      end
  end

  def url
    "https://storage.googleapis.com/kubernetes-release/release/#{version}/bin/#{os}/#{arch}/kubectl"
  end

  def ready?
    path.symlink? && path.executable? && exact_path.executable?
  end

  # This smells of :reek:TooManyStatements
  def download
    path.dirname.mkpath

    case io = URI.open(url)
    when StringIO
      begin
        exact_path.open('w', 0o755) { |fd| fd.write(io) }
      rescue StandardError
        exact_path.unlink if exact_path.exist?
        raise
      end
    when Tempfile
      io.close
      iopath = Pathname.new(io.path)
      iopath.chmod(0o755)
      iopath.rename exact_path
    else
      die "Don't know what to do with #{io.inspect}"
    end

    path.delete if path.symlink?
    path.make_symlink exact_path
  end

  def any_kubectl_path
    begin
      (DIRECTORY.children.reverse +
       ENV['PATH']
         .split(':')
         .map { |pth| Pathname.new pth }
         .map { |pth| pth + 'kubectl' })
        .select(&:file?)
        .select(&:executable?)
        .reject { |pth| PROGRAM_NAME == pth.realpath }
        .first || begin
          STDERR.puts "FATAL: At least one existing version of kubectl must be available."
          exit(127)
        end
    end.to_s
  end

  def version_data
    @version_data ||= begin
        stdout, _, status = Open3.capture3(
          any_kubectl_path,
          'version', '--output=json'
        )
        case status.exitstatus
        when 0
          JSON.parse stdout
        else
          # Fallback to just trying to execute the command with any kubectl.
          Process.exec any_kubectl_path, *ARGV
        end
      end
  end

  # I don't care about :reek:FeatureEnvy
  def major_minor
    # TODO: It would be cool to try <major>.<minor + 1> if possible.
    ver = version_data['serverVersion']
    [ver['major'], ver['minor']]
      .map(&:to_i)
      .map(&:to_s)
      .join('.')
  end

  def version
    @version ||= begin
        URI.open(
          "https://storage.googleapis.com/kubernetes-release/release/stable-#{major_minor}.txt",
          &:read
        ).chomp
      end
  end

  def run
    Process.exec any_kubectl_path, *ARGV if ARGV.first == 'completion'
    ENV['PATH'] = ENV['PATH'] + ":#{KREW_BIN_DIR}" if KREW_BIN_DIR.directory?

    download unless ready?
    Process.exec path.to_s, *ARGV
  end
end

App.new.run if $PROGRAM_NAME == __FILE__

# EOF
