#!/usr/bin/env bash

set -eu

declare -i use_names=1

header() {
  printf "%-4s %15s\t%9s\t%5s\n" "" ADDRESS PORT PID
}

row() {
  local -r ipv=$1 proto=$2 addr=$3 port=$4 pid=$5

  local str_addr
  if ((use_names)); then
    case "$addr" in
    127.0.0.1) str_addr='localhost' ;;
    ::1) str_addr='localhost' ;;
    \*) str_addr='all' ;;
    0.0.0.0) str_addr='all' ;;
    ::) str_addr='all' ;;
    *) str_addr=$addr ;;
    esac
  else
    case "$addr" in
    \*) if [[ ${ipv,,} == ipv4 ]]; then str_addr=0.0.0.0; else str_addr=::; fi ;;
    *) str_addr=$addr ;;
    esac
  fi

  printf "%-4s %15s\t%5d/%3s\t%5s\n" "$ipv" "$str_addr" "$port" "${proto,,}" "$pid"
}

darwin_cmd() {
  local -ir wanted_ipv=$1 wanted_port=$2
  local -r wanted_protocol=$3
  local protocol family

  printf "%-4s %5s %13s\t%5s\t%5s\n" "" PROTO ADDRESS PORT PID
  for protocol in tcp udp; do
    [[ $wanted_protocol == tcp ]] && [[ $protocol != tcp ]] && continue
    [[ $wanted_protocol == udp ]] && [[ $protocol != udp ]] && continue
    for family in inet inet6; do
      ((wanted_ipv == 4)) && [[ $family != inet ]] && continue
      ((wanted_ipv == 6)) && [[ $family != inet6 ]] && continue
      local addrport pid
      local addr
      local -i port
      local ipv
      if [[ $family == inet ]]; then
        ipv=IPv4
      else
        ipv=IPv6
      fi
      netstat -a -L -n -v -f "$family" -p "$protocol" |
        awk '{ print $2" "$5 }' |
        while read -r addrport pid; do
          [[ $addrport == *listen* ]] && continue
          [[ $pid -eq 0 ]] && continue
          addr=${addrport%.*}
          port=${addrport##*.}
          ((wanted_port > 0)) && ((wanted_port != port)) && continue

          row "$ipv" "$protocol" "$addr" "$port" "$pid"
        done
    done
  done
}

linux_cmd() {
  local -ir wanted_ipv=$1 wanted_port=$2
  local -r wanted_protocol=$3

  header

  local protocol family
  for family in inet inet6; do
    ((wanted_ipv == 4)) && [[ $family != inet ]] && continue
    ((wanted_ipv == 6)) && [[ $family != inet6 ]] && continue
    local addrport pid
    local addr
    local ipv
    if [[ $family == inet ]]; then
      ipv=IPv4
    else
      ipv=IPv6
    fi
    netstat -l -n -p -W --protocol="$family" 2>/dev/null |
      awk 'BEGIN { FIELDWIDTHS="4 16:20 40:5" } /^(tcp|udp)/ { print $1" \t "$2" \t "$3 }' |
      while read -r protocol addrport rest; do
        local pid=${rest%%/*}
        case "${protocol,,}" in
        tcp*)
          protocol=tcp
          [[ $wanted_protocol == udp ]] && continue
          ;;
        udp*)
          protocol=udp
          [[ $wanted_protocol == tcp ]] && continue
          ;;
        *) continue ;;
        esac
        local addr
        local -i port
        addr=${addrport%:*}
        port=${addrport##*:}
        ((wanted_port > 0)) && ((wanted_port != port)) && continue

        row "$ipv" "$protocol" "$addr" "$port" "$pid"
      done
  done
}

usage() {
  if (($# > 0)); then
    pod2usage "-exit=0" "-verbose=1" "-utf8" "-formatter=Pod::Text::Termcap" "$0" || :
    {
      echo "USAGE ERROR: $*"
    } 1>&2
    exit 2
  fi

  pod2usage "-exit=0" "-verbose=3" "-utf8" "-formatter=Pod::Text::Termcap" "$0" || :
  exit 0
}

app() {
  local -i ipv=0 port=0 do_sort=1
  local protocol=both
  while (($#)); do
    case "$1" in
    -s | --sort) do_sort=1 ;;
    -S | --no-sort) do_sort=0 ;;
    -n) use_names=0 ;;
    -N) use_names=1 ;;
    -p | --port)
      shift
      port=$1
      ;;
    --port=*) port=${1#--port=} ;;
    -4) ipv=4 ;;
    -6) ipv=6 ;;
    -t | -tcp | --tcp) protocol=tcp ;;
    -u | -udp | --udp) protocol=udp ;;
    -H | -h | --h | --help) usage ;;
    -*) usage "Unknown argument: $1" ;;
    *) usage "Unknown argument: $1" ;;
    esac
    shift
  done

  readonly ipv port protocol

  local cmd=''
  case "$OSTYPE" in
  darwin*) cmd=darwin_cmd ;;
  linux*) cmd=linux_cmd ;;
  *) usage "Unknown OS: $OSTYPE" ;;
  esac
  readonly cmd

  "$cmd" "$ipv" "$port" "$protocol" |
    if ((do_sort)); then sort -n -k 5 -k 4; else cat; fi
}

app "$@"

: <<=cut
=pod

=head1 NAME

whats_listening - Show what is listening

=head1 SYNOPSIS

whats_listening [options]

=head1 DESCRIPTION

Show what is listening on a port.

=head1 OPTIONS

=over

=item B<-p> I<port> or B<--port> I<port>

Only show processes listening on I<port>.

=item B<-4> or B<-6>

Only show IPv4 or IPv6 addresses.  Default is both.

=item B<-t> or B<-tcp> or B<--tcp>

Only show TCP connections.  Default is to show both UDP and TCP.

=item B<-u> or B<-udp> or B<--udp>

Only show UDP connections.  Default is to show both UDP and TCP.

=item B<-s> or B<--sort>

Sort the output by the PID and PORT.  The default is sorted.

=item B<-S> or B<--no-sort>

The output order is unspecified.  The default is sorted.

=item B<-n>

Show network addresses instead of names for localhost (127.0.0.1 and ::1) and any (0.0.0.0 & ::).

=item B<-n>

Show names for localhost (127.0.0.1 and ::1) and any (0.0.0.0 & ::) instead of network addresses.

=back

=cut
