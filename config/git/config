# vim: ft=gitconfig :

# sources of fun aliases:
# https://gist.github.com/NigelThorne/dcb2ff06c6b48eccd9c547260937b4b4

[alias]
	aliases  = "!f() { local -r k=$1; shift; printf 'git config --global %s %q\n' \"$k\" \"$*\"; }; git config --get-regexp '^alias' | while IFS= read -r line; do f $line; done | sort"
	debug    = "!set -x; GIT_TRACE=2 GIT_CURL_VERBOSE=2 GIT_TRACE_PERFORMANCE=2 GIT_TRACE_PACK_ACCESS=2 GIT_TRACE_PACKET=2 GIT_TRACE_PACKFILE=2 GIT_TRACE_SETUP=2 GIT_TRACE_SHALLOW=2 git"
	# Quote / unquote a sh command, converting it to / from a git alias string
	share    = !git daemon --reuseaddr --base-path=./.git --verbose --export-all
	unstage  = reset HEAD --
	tags     = tag

	quote-string   = "!read -r l; printf \\\"!; printf %s \"$l\" | sed 's/\\([\\\"]\\)/\\\\\\1/g'; printf \" #\\\"\\n\" #"
	unquote-string = "!read -r l; printf %s \"$l\" | sed 's/\\\\\\([\\\"]\\)/\\1/g'; printf \"\\n\" #"

	graph = log --graph --abbrev-commit --decorate --date=relative --all

	### Logs
	lc = log ORIG_HEAD.. --stat --no-merges
	lg = ls  --date=relative --graph --all
	ls = log --abbrev-commit --decorate --date=short    --oneline
	lu = ls --date=relative '@{upstream}..HEAD'
	lp = ls --date=relative '@{push}..HEAD'


	home = rev-parse --show-toplevel

	# gh -- GitHub CLI
	fork = !gh repo fork

	### shorts
	aa = add --all
	ap = add --patch
	ca = commit --amend
	cah = commit --amend --reuse-message=HEAD
	ci = commit --verbose
	cm = commit -m
	co = checkout
	d  = diff
	dc = diff --cached
	l  = !printf '====> ' && git rev-parse --abbrev-ref HEAD && git log '@{u}..'
	pt = !git push && git push --tags
	rv = remote -v
	s  = status --short --branch --show-stash
	sv = status --verbose --show-stash
	sw = switch
	swd = !git switch $(git default-branch)
	up = pull --rebase --autostash
	w  = whatchanged
	f = fetch --all --prune --no-auto-gc --jobs=3 --progress --show-forced-updates
	ft = fetch --tags --prune-tags --progress --show-forced-updates

	# A better version of git rebase -i <branch>
	mb = "!f() { git merge-base --fork-point \"${1:-@{push}}\" HEAD; }; f"
	rbi = "!f() { local -r mb=$(git mb \"$1\") && [ -n \"$mb\" ] && git rebase -i $mb; }; f"
	rash = rebase --autostash origin/HEAD

	# Find branches containing commit
	find-branch = "!f() { git br -a --contains $1; }; f"

	# Find tags containing commit
	find-tags = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	find-by-source = "!f() { git  --date=short -S$1; }; f"

	# Find commits by commit message
	find-by-commit = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

# br = branch '--format=%(HEAD) %(color:#008800 #112233)%(align:40)%(refname:lstrip=2)%(end) %(objectname:short) %(align:25)%(authordate:relative)%(end) %(authorname) %0a    %(color:white)%(subject)'
# qbr = branch --format='%(color:#88ff88 black)%(align:50)%(refname:lstrip=2)%(end) %(objectname:short) %(align:25)%(authordate:relative)%(end) %(authorname) %0a    %(color:yellow)%(subject)'

	# Find reachable child commits of a commit
	children = "!bash -c 'c=${1:-HEAD}; set -- $(git rev-list --all --not \"$c^@\" --children | grep $(git rev-parse \"$c\") ); shift; echo $*' -"

	show-not-main = ! git for-each-ref --format='if not %(refname:short) in [\"master\", \"main\", \"dev\"]: print(%(refname:short))' --python refs/heads | python3
	show-not-main-zero = ! git for-each-ref --format='if not %(refname:short) in [\"master\", \"main\", \"dev\"]: print(%(refname:short), end=\"\\0\")' --python refs/heads | python3

	show-gone = ! git for-each-ref --format='if %(upstream:track) == \"[gone]\": print(%(refname:short))' --python | python3
	show-gone-zero = ! git for-each-ref --format='if %(upstream:track) == \"[gone]\": print(%(refname:short), end=\"\\0\")' --python | python3

	nuke-gone = ! git f --quiet && git show-gone-zero | xargs -0t git branch -D
	nuke-not-main = ! git f --quiet && git show-not-main-zero | xargs -0t git branch -d

	default-branch = ! basename "$(git rev-parse --abbrev-ref origin/HEAD)"
	retag = "!r() { set -ex ; git tag -d \"$1\" && git tag \"$@\"; }; r"


[instaweb]
	port = 2001

[color]
	ui = auto

[core]
	excludesfile = ~/.config/git/ignore
	attributesfile = ~/.config/git/attributes
	autocrlf = input

[merge]
	ff = only
	tool = Kaleidoscope
	conflictstyle = diff3

[mergetool]
	keepBackup = false
	prompt = false


[difftool]
	keepBackup = false
	prompt = false

[difftool "kitty"]
	cmd = kitty +kitten diff $LOCAL $REMOTE

[mergetool "nvr"]
	cmd = nvr -s -d $LOCAL $BASE $REMOTE $MERGED -c 'wincmd J | wincmd ='
[difftool "nvr"]
	cmd = nvr -s -d $LOCAL $REMOTE


[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" \"$REMOTE\"
[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"


[mergetool "vscode"]
	cmd = code --wait --new-window --merge $REMOTE $LOCAL $BASE $MERGED
[difftool "vscode"]
	cmd = code --wait --new-window --diff $LOCAL $REMOTE

[diff]
	tool = Kaleidoscope
	renames = copy
	renameLimit = 10000
	colorMoved = default
	algorithm = histogram
	colorMoved = default

[diff "scpt"]
	textconv = osadecompile
	binary = true

[diff "textract"]
	textconv = textract
	binary = true

[fetch]
	prune = true

[push]
	default = current

[log]
	decorate = short
	abbrevCommit = true

[grep]
	fullname = true

[pretty]
	pp = "%C(yellow)%h%C(reset) %C(cyan)%cd%C(reset) %C(white)%<(70,trunc)%s%C(reset) %C(green)[%aN]%C(reset) %C(auto)%d%C(reset)"

[tag]
	sort = version:refname

[advice]
	statusHints = false

[help]
	autocorrect = 1

[url "git@gitlab.com:"]
	insteadOf = https://gitlab.com/
# avoid issues with cargo-edit
[url "https://github.com/rust-lang/crates.io-index"]
	insteadOf = https://github.com/rust-lang/crates.io-index
# avoid issues with cargo audit
[url "https://github.com/RustSec/advisory-db.git"]
	insteadOf = https://github.com/RustSec/advisory-db.git

; Added by the GitHub.app
[filter "hawser"]
	clean = git hawser clean %f
	smudge = git hawser smudge %f
	required = true
[diff "plist"]
	textconv = plutil -convert xml1 -o -
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
	process = git-lfs filter-process
[filter "wordlist"]
	smudge = cat
	clean = env LC_ALL=C sort -u
[filter "itermprofile"]
	clean = json-canonicalizer
	smudge = cat
[pull]
	ff = only
[pager]
	diff = delta
	log = delta
	reflog = delta
	show = delta
[interactive]
	diffFilter = delta --color-only --features=interactive
	singleKey = true
[delta]
	features = decorations dark
	navigate = true
[delta "interactive"]
	keep-plus-minus-markers = true
[delta "decorations"]
	; commit-decoration-style = blue ol
	; commit-style = raw
	hunk-header-style = line-number syntax
	side-by-side = false
	line-numbers = true
[delta "dark"]
	dark = true
	syntax-theme = gruvbox-dark
	file-style = "#ff0000"
	file-decoration-style = "#0088ff ul ol"
	hunk-header-decoration-style = "#0088ff box"
	hunk-header-line-number-style = "#11aa11"
[delta "light"]
	light = true
	syntax-theme = Github
[rerere]
	enabled = true
[include]
	path = local.inc

# vim: filetype=gitconfig noexpandtab :
[init]
	defaultBranch = main
